.. pescador documentation master file, created by
   sphinx-quickstart on Fri Apr  3 10:03:34 2015.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Introduction
------------

Pescador is a library for streaming (numerical) data for use in iterative machine learning applications.

The core concept is the :ref:`Streamer` object, which encapsulates a Python `generator` to allow for re-use and
inter-process communication.

The basic use case is as follows:

    1. Define a generator function `g` which yields a dictionary of numpy arrays at each step
    2. Construct a :ref:`Streamer` object `stream = Streamer(g, args...)`
    3. Iterate over examples generated by `stream()`.

On top of this basic functionality, pescador provides the following tools:

    - A :ref:`Streamer` allows you to turn a finite-lifecycle generator into an infinte stream with `cycle()`, by automatically restarting the generator if it completes.
    - Multiplexing multiple data streams (see :ref:`Mux`)
    - Transform or modify streams with Maps (see :ref:`Processing Data Streams`)
    - Parallel processing (see :ref:`ZMQStreamer`)
    - Buffering of sampled data into fixed-size batches (see :ref:`buffer_stream`)

For examples of each of these use-cases, refer to the :ref:`Examples` section.


Definitions
-----------

Pescador is designed with the following core principles:

1. An "iterator" is an object that produces a sequence of data, i.e. via `__next__` / `next()`. (`Glossary definition <https://docs.python.org/3/glossary.html#term-iterator>`_, `Iterator Types <https://docs.python.org/3/library/stdtypes.html#typeiter>`_)

2. An "iterable" is an object that can produce iterators, i.e. via `__iter__` / `iter()`. (`Glossary definition <https://docs.python.org/3/glossary.html#term-iterable>`_)

3. A "stream" is the sequence of objects produced by an iterator.

4. A "generator" (or more precisely "generator function") is a callable object that returns a single generator iterator. (`Glossary definition <https://docs.python.org/3/glossary.html#term-generator>`_)

For example:
    - `range` is an iterable function
    - `range(8)` is an iterable, and its iterator produces the stream (consecutively) `0, 1, 2, 3, ...`


Streaming Data
--------------
1. Pescador defines an object called a `Streamer` for the purposes of (re)creating iterators indefinitely and (optionally) interrupting them prematurely.

2. `Streamer` inherits from `iterable` and can be iterated directly.

3. A `Streamer` can be initialized with one of two types:
    - Any iterable type, e.g. `range(7)`, `['foo', 'bar']`, `"abcdef"`, or another `Streamer()`
    - A generator function and its arguments + keyword arguments.

4. A `Streamer` transparently yields the data stream flowing through it

    - A `Streamer` should not modify objects in its stream.

    - In the spirit of encapsulation, the modification of data streams is achieved through separate functionality (see :ref:`Processing Data Streams`)


Multiplexing Data Streams
-------------------------
1. Pescador defines an object called a `Mux` for the purposes of stochastically multiplexing streams of data.

2. `Mux` inherits from `Streamer`, which makes it both iterable and recomposable, e.g. one can construct arbitrary trees of data streams.

3. A `Mux` is initialized with a container of one or more iterables, and parameters to control the stochastic behavior of the object.

4. As a subclass of `Streamer`, a `Mux` also transparently yields the stream flowing through it, i.e. :ref:`Streaming Data`-4.


Processing Data Streams
-----------------------
Pescador adopts the concept of "transformers" for processing data streams.

1. A transformer takes as input a single object in the stream.

2. A transformer yields an object.

3. Transformers are iterators, i.e. implement a `__next__` method, to preserve iteration.

4. An example of a built-in transformer is `enumerate` [`ref <https://docs.python.org/3.3/library/functions.html#enumerate>`_]


Basic Usage
--------------
.. toctree::
    :maxdepth: 2

    example1
    example2
    example3
    bufferedstreaming

Examples
--------
.. toctree::
    :maxdepth: 2

    auto_examples/index

API Reference
-------------
.. toctree::
    :maxdepth: 2

    api


Changes
-------
.. toctree::
    :maxdepth: 2

    changes


Contribute
----------
- `Issue Tracker <http://github.com/pescadores/pescador/issues>`_
- `Source Code <http://github.com/pescadores/pescador>`_


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

